import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState } from 'app/store';
import * as vehicleService from '../../services/vehicles';

export type VehicleType = {
  vin: string,
  image?: string,
  imageUrl?: string,
  email: string,
  milage: number,
  model_id?: number,
  make_id?: number,
  year?: number,
  createdAt?: Date,
  updateAt?: Date,
}

export interface MakeModelState {
  status: 'idle' | 'loading' | 'failed';
  vehicle: VehicleType | null;
  vehicles: VehicleType[];
}

const initialState: MakeModelState = {
  vehicle: null,
  status: 'idle',
  vehicles: []
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchVehicle = createAsyncThunk(
  'vehicle/fetchVehicle',
  vehicleService.fetchVehicle
);

export const fetchVehicles = createAsyncThunk(
  'vehicle/fetchVehicles',
  vehicleService.fetchVehicles
);

export const vehicleSlice = createSlice({
  name: 'vehicle',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    updateVehicle: (state) => {
      state.status = 'idle';
    }
    /* increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action: PayloadAction<number>) => {
      state.value += action.payload;
    }, */
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      /* fetchVehicle */
      .addCase(fetchVehicle.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchVehicle.fulfilled, (state, action) => {
        const { data, err } = action.payload;
        state.status = 'idle';
        state.vehicle = err ? null : data;
      })
      .addCase(fetchVehicle.rejected, (state) => {
        state.status = 'failed';
      })
      /* fetchVehicles */
      .addCase(fetchVehicles.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchVehicles.fulfilled, (state, action) => {
        const { data, err } = action.payload;
        state.status = 'idle';
        state.vehicles = err ? [] : data;
      })
      .addCase(fetchVehicles.rejected, (state) => {
        state.status = 'failed';
      })
  },
});

export const { updateVehicle } = vehicleSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectVehicle = (state: RootState) => state.vehicle.vehicle;
export const selectVehicles = (state: RootState) => state.vehicle.vehicles;


export default vehicleSlice.reducer;
