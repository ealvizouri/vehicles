import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import _fetch from '../fetch';

export type MakeModelType = {
  id: number,
  name: string
}

export interface MakeModelState {
  status: 'idle' | 'loading' | 'failed';
  makes: MakeModelType[];
  models: MakeModelType[];
}

const initialState: MakeModelState = {
  makes: [],
  models: [],
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchMakes = createAsyncThunk(
  'makeModel/fetchMakes',
  async () => {
    return await _fetch({
      endpoint: 'makes'
    });
  }
);

export const fetchModels = createAsyncThunk(
  'makeModel/fetchModels',
  async (makeId: number) => {
    return await _fetch({
      endpoint: `models/${makeId}`
    });
  }
);

export const makeModelSlice = createSlice({
  name: 'makeModel',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    fake: (state) => {
      state.status = 'idle';
    }
    /* increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action: PayloadAction<number>) => {
      state.value += action.payload;
    }, */
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchMakes.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchMakes.fulfilled, (state, action) => {
        const { data, err } = action.payload;
        state.status = 'idle';
        state.makes = err ? [] : data;
      })
      .addCase(fetchMakes.rejected, (state) => {
        state.status = 'failed';
      })
      .addCase(fetchModels.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchModels.fulfilled, (state, action) => {
        const { data, err } = action.payload;
        state.status = 'idle';
        state.models = err ? [] : data;
      })
      .addCase(fetchModels.rejected, (state) => {
        state.status = 'failed';
      });
  },
});

export const { fake } = makeModelSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state: RootState) => state.counter.value;


export default makeModelSlice.reducer;
